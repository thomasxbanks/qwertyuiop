/* LXLabs cooper-az-respitool v1.0.0 */
(function(a){"function"==typeof define&&define.amd?define("main",a):a()})(function(){'use strict';// utils.js
/**
   * Detects if app is running in Cordova/PhoneGap environment.
   *
   * @return {Bool} - is PhoneGap true/false.
   */var l=Math.round;function a(){return!!((window.cordova||window.PhoneGap||window.phonegap)&&/ios|iphone|ipod|ipad|android/i.test(navigator.userAgent))}/**
   * Generates a unique hash string.
   *
   * @return {String} - unique-ish hash.
   */function b(a=16){let b="";const c="abcdefghijklmnopqrstuvwxyz0123456789";for(let d=0;d<a;d+=1)b+=c.charAt(Math.floor(Math.random()*c.length));return b}/* eslint-disable */ /**
   * generates RFC4122 guid
   * Public Domain/MIT
   * @return {String} - guid
   * @example https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
   */function c(){let a=new Date().getTime();"undefined"!=typeof performance&&"function"==typeof performance.now&&(a+=performance.now());const b=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],e=["x","x","x","x","x","x","x","x","-","x","x","x","x","-","4","x","x","x","-","y","x","x","x","-","x","x","x","x","x","x","x","x","x","x","x","x"];let f="",g=0,h=0|a+4294967295*Math.random();for(;36>g++;){const a=e[g-1],c=15&h,d="x"===a?c:8|3&c;f+="-"===a||"4"===a?a:b[d],h=0==g%8?0|4294967295*Math.random():h>>4}return f}/* eslint-enable */ // @Returns a 9-character string of random numbers and letters
// eg: o3qfpgfr5
function d(a,b){// Define variables
const{cordova:c}=window,{target:d}=a,{mime:e}=d.dataset||n.defaultMimeType,f=c?`${c.file.applicationDirectory}www${d.dataset.href}`:d.dataset.href,g=(a="event")=>{const c={ea:d&&d.dataset.category,el:d&&d.textContent.trim()},e=Object.assign({},n.trackingDefaults.download,c);// Record an exception if file not found, else record event
e.t=a,b.track(e)},h=a=>{g("exception");alert(`File (${a}) not found.`)};c?c.plugins.fileOpener2.open(f,e,{error:()=>h(f),success:()=>g()}):fetch(f).then(a=>{a&&200>=a.status?(g(),window.open(f)):h(f)}).catch(()=>{h(f)})}function e(a){const b=document.querySelectorAll("[data-resource], [data-slidedeck]");b&&[...b].forEach(b=>{[...b.querySelectorAll("button")].forEach(b=>{b.addEventListener("click",b=>d(b,a),!1)})})}function f(){const a=Array.from(document.querySelectorAll(".grid"));a&&a.forEach(a=>{const b=a.querySelector(".content");b&&(b.style.opacity=1)})}function g(){// Get the hidden links
const a=Array.from(document.querySelectorAll(".page-navigation li[data-visible]")),b=localStorage.rowsToShow?JSON.parse(localStorage.rowsToShow):null;// Get the rows to show from local storage
b&&a.forEach(a=>{a.setAttribute("data-visible",!!(-1<b.indexOf(a.dataset.target)))})}function h(){const a=document.querySelector("[data-page=\"homepage\"]");a&&(localStorage.removeItem("session"),localStorage.removeItem("rowsToShow"))}function i(){const a=Array.from(document.querySelectorAll("[data-action=\"save-compound-data\"]"));a&&a.forEach(a=>{a.addEventListener("click",a=>{const b=a.currentTarget.dataset.target;if(confirm(`This will show all of the data for ${b}. Are you sure?`)){const a=localStorage.getItem("rowsToShow");if(a){const c=JSON.parse(a);-1===c.indexOf(b)&&(c.push(b),localStorage.setItem("rowsToShow",JSON.stringify(c)),document.location.reload())}else localStorage.setItem("rowsToShow",JSON.stringify([b])),document.location.reload()}})})}function j(){const a=document.querySelector(".stop-motion_animation");if(a&&"true"===document.body.dataset.active){const b=Array.from(a.querySelectorAll("img:not(.fallback)"));let c=b.length;const d=()=>{setInterval(()=>{const b=a.querySelector("img");a.insertAdjacentElement("beforeend",b)},40)},e=()=>{const b=a.querySelector(".fallback");b.style.transition=`opacity ease ${300}ms`,b.style.opacity=0,setTimeout(()=>{// Remove the fallback image
b.outerHTML="",d()},300)},f=()=>{c=0===c?0:c-1,0===c&&e()};b.forEach(a=>{a.complete?f():a.addEventListener("load",f)})}}/**
   * @module
   * GA Measurement Protocol Tracker module with offline tracking storage
   * @class Tracker
   * @global window.Lockr
   * @example https://www.simoahava.com/analytics/track-users-who-are-offline-in-google-analytics/
   */ /**
    * Build tracking event trackingDefaults object for current Screen View & send to tracker.
    *
  */function k(a){const b={cd:document.body.dataset.page?document.body.dataset.page:"lxl_no_page"},c=Object.assign({},n.trackingDefaults.page,b);return a.track(c)}const m=()=>Math.random().toString(36).substr(2,9);var n={deviceID:(()=>{// Create a unique device ID if one does not already exist
let b=localStorage.getItem("deviceID");return b||(b=[m()],a()?b.unshift("lxl_"):b.unshift("web_"),b=b.join(""),localStorage.setItem("deviceID",b)),b})(),isPhoneGap:a(),sessionID:((a="session")=>{let b=localStorage.getItem(a);return b||(b=c(),localStorage.setItem(a,b)),b})(),defaultMimeType:"application/vnd.ms-powerpoint",trackingDefaults:{download:{ea:"",// event action
ec:"document",// event category
el:"",// event category
t:"event"// hit type
},page:{el:"view",// event category
t:"screenview"// hit type
}}};const o="https://www.google-analytics.com",p=document.querySelector("meta[name='application-name']"),q=p&&p.dataset.name,r=p&&p.dataset.version,s={v:1,// Google protocol version
tid:"UA-36156565-7",ds:n.isPhoneGap?"app":"web",// data source
an:q,av:r,uid:n.deviceID,// Set Device ID
cid:n.sessionID// Set Session ID
};class t{constructor(a="lxl_"){this.prefix=a,Lockr.prefix=this.prefix}/**
     * Merge params obj into defaults obj then convert to query string.
     */static buildParamString(a){let b="";// slice remove trailing ampersand
return Object.entries(Object.assign(s,a)).forEach(([a,c])=>{b+=`${a}=${c}&`}),b=b.slice(0,-1),b}/**
     * If able to make an XHR request to Google, then:
     * 1] send current hit data
     * 2] send any saved hit data found in local storage,
     * otherwise:
     * 1] save hit to local storage
     *
     * @public
     * @example https://www.simoahava.com/analytics/track-users-who-are-offline-in-google-analytics/
     * @param {Object} - event - object with Google measurement protocol params as key value pairs
     */track(a){const c=this.constructor.buildParamString(a),d=b(),e=new XMLHttpRequest;// console.log('Tracking payload >>> ', params);
e.open("HEAD",`${o}/collect`),e.onreadystatechange=()=>{if(4===e.readyState&&200!==e.status&&Lockr.sadd("hits",encodeURI(`${c}z=${d}`)),4===e.readyState&&200===e.status){if("sendBeacon"in navigator)navigator.sendBeacon(`${o}/collect`,encodeURI(`${c}z=${d}`));else{const a=new XMLHttpRequest;a.open("POST",`${o}/collect`,!0),a.send(encodeURI(`${c}z=${d}`))}this.constructor.sync()}},e.send()}/**
     * Send any saved hit data found in local storage & flush cache when done.
     */static sync(){if(0<Lockr.smembers("hits").length){const a=1*new Date/1e3,b=Lockr.smembers("hits"),c=20,d=Lockr.smembers("hits").map((a,d)=>0==d%c?b.slice(d,d+c):null).filter(a=>a);for(let b=0,c=d.length;b<c;b+=1){const c=new XMLHttpRequest;c.open("POST",`${o}/batch`,!0),c.send(d[b].map(b=>-1<b.indexOf("&qt=")?b.replace(/qt=([^&]*)/,`qt=${1e3*l(a-b.match(/qt=([^&]*)/)[1]/1e3)}`):b).join("\n"))}Lockr.flush()}}/**
     * Cache cleanup: if online, then send any saved hit data on init().
     *
     */maybeSendSavedHits(){const a=new XMLHttpRequest;a.open("HEAD",`${o}/collect`),a.onreadystatechange=()=>{4===a.readyState&&200===a.status&&this.constructor.sync()},a.send()}/**
     * If app receives the PhoneGap 'online' event, then maybe send cached hits.
     * This event does not fire in the web version - just sends any saved tracking
     * data when app is first online.
     *
     */onDeviceReady(){document.addEventListener("online",this.maybeSendSavedHits.bind(this),!1)}/**
     * Only bind 'online' event if 'deviceready' is received, ie. in PhoneGap environment.
     *
     */bindEvents(){document.addEventListener("deviceready",this.onDeviceReady.bind(this),!1)}init(){this.bindEvents()}}const u=()=>{document.body.dataset.active=!0,h(),f();// Action page transition
// Initialise the tracking
const a=new t;// Adds event listeners to download buttons
// Adds event listeners to hidden buttons
// Initialises the menu items for hidden data
a.init(),k(a),e(a),g(),i(),j()};n.isPhoneGap?document.addEventListener("deviceready",u):window.addEventListener("load",u)});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
