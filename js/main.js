/* LXLabs cooper-az-respitool v1.0.0 */
(function(a){"function"==typeof define&&define.amd?define("main",a):a()})(function(){'use strict';// utils.js
/**
   * Detects if app is running in Cordova/PhoneGap environment.
   *
   * @return {Bool} - is PhoneGap true/false.
   */var q=Math.round;function a(){return!!((window.cordova||window.PhoneGap||window.phonegap)&&/ios|iphone|ipod|ipad|android/i.test(navigator.userAgent))}/**
   * Generates a unique hash string.
   *
   * @param {Number} - len - Length of hash. Defaults to 16 characters
   * @return {String} - unique-ish hash.
   */function b(a=16){let b="";const c="abcdefghijklmnopqrstuvwxyz0123456789";for(let d=0;d<a;d+=1)b+=c.charAt(Math.floor(Math.random()*c.length));return b}/* eslint-disable */ /**
   * generates RFC4122 guid
   * Public Domain/MIT
   * @return {String} - guid
   * @example https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
   */function c(){let a=new Date().getTime();"undefined"!=typeof performance&&"function"==typeof performance.now&&(a+=performance.now());const b=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],e=["x","x","x","x","x","x","x","x","-","x","x","x","x","-","4","x","x","x","-","y","x","x","x","-","x","x","x","x","x","x","x","x","x","x","x","x"];let f="",g=0,h=0|a+4294967295*Math.random();for(;36>g++;){const a=e[g-1],c=15&h,d="x"===a?c:8|3&c;f+="-"===a||"4"===a?a:b[d],h=0==g%8?0|4294967295*Math.random():h>>4}return f}/* eslint-enable */ /**
   * @constant {Function} - salt - Provides a unique-ish identifier
   * @example salt() = 0egnmh5vo
   * @returns {String} - A 9-character string of random characters
   */function d(){const a=document.querySelectorAll(".cutaway");a&&a.forEach(a=>x(a))}function e(a,b){// Define variables
const{cordova:c}=window,{target:d}=a,{mime:e}=d.dataset||w.defaultMimeType,f=c?`${c.file.applicationDirectory}www${d.dataset.href}`:d.dataset.href,g=(a="event")=>{const c={ea:d&&d.dataset.category,el:d&&d.textContent.trim()},e=Object.assign({},w.trackingDefaults.download,c);// Record an exception if file not found, else record event
e.t=a,b.track(e)},h=a=>{g("exception");alert(`File (${a}) not found.`)};c?c.plugins.fileOpener2.open(f,e,{error:()=>h(f),success:()=>g()}):fetch(f).then(a=>{a&&200>=a.status?(g(),window.open(f)):h(f)}).catch(()=>{h(f)})}/**
   * @constant {Function} - DownloadButtons - Adds click listeners to all download buttons
   */function f(a){const b=document.querySelectorAll("[data-resource], [data-slidedeck], [data-publications-table]");b&&[...b].forEach(b=>{[...b.querySelectorAll("[data-download]")].forEach(b=>{b.addEventListener("click",b=>e(b,a),!1)})})}/**
   * @constant {Function} - Provides functionality to filter the Publications table
   */function g(){/**
     * @constant {node} - Publications table element
     */const a=document.querySelector("[data-publications-table]"),b=a?[...a.querySelectorAll("[data-download]")]:[],c=document.querySelector("[name=\"data-sort-cat\"]"),d=document.querySelector("[name=\"data-sort-cpd\"]"),e=a=>{/* eslint-disable no-param-reassign */a.style.display="none"},f=a=>{/* eslint-disable no-param-reassign */a.style.display=""},g=()=>{const b=[...document.querySelectorAll("[data-download]")],c=b.filter(a=>"none"!==a.style.display),d=!(0<c.length),e=`<dialog aria-live="assertive" open class="message warning">${w.message.zeroResults}</dialog>`,f=a.querySelector(".heading"),g=a.querySelector(".message");g&&g.remove(),d&&f.insertAdjacentHTML("afterend",e)},h=()=>{const a=c.options[c.selectedIndex].value,h=d.options[d.selectedIndex].value;b.forEach(b=>{"Any"===a&&"Any"===h?f(b):"Any"===a&&"Any"!==h?b.dataset.cpd===h?f(b):e(b):"Any"===h&&"Any"!==a?b.dataset.cat===a?f(b):e(b):b.dataset.cat===a&&b.dataset.cpd===h?f(b):e(b)}),g()};/**
     * @constant {Array} - Publications download buttons
     */if(a&&c&&d){c.addEventListener("change",h),d.addEventListener("change",h);// Listen for the select changing and run the relevant filter function
const a=sessionStorage.getItem("publicationsFilterCategory");// Commented out in case they want this putting back
// const onLoadTargetCompound = sessionStorage.getItem('publicationsFilterCompound');
// if (onLoadTargetCompound) {
//   // Set the drop-down option to match the selected data
//   sortCpdSelect.options.selectedIndex = [...sortCpdSelect.options].map((option, index) => (option.value === onLoadTargetCompound ? index : null)).filter(e => e).join('');
// }
a&&(c.options.selectedIndex=[...c.options].map((b,c)=>b.value===a?c:null).filter(a=>a).join("")),h()}}/**
   * @constant {Function} - Grid - Adds page transition animation
   */function h(){const a=Array.from(document.querySelectorAll(".grid"));a&&a.forEach(a=>{const b=a.querySelector(".content");b&&(b.style.opacity=1)})}/**
   * @constant {Function} - HiddenLinks - Adds click listeners to all secret buttons
   */function i(){// Get the hidden links
const a=Array.from(document.querySelectorAll(".page-navigation li[data-visible]")),b=localStorage.rowsToShow?JSON.parse(localStorage.rowsToShow):null;// Get the rows to show from local storage
b&&a.forEach(a=>{a.setAttribute("data-visible",!!(-1<b.indexOf(a.dataset.target))),a.setAttribute("tabindex",-1<b.indexOf(a.dataset.target)?"":"-1")})}/**
   * @constant {Function} - Homepage - Resets session and re-hides any hidden data
   */function j(){const a=document.querySelector("[data-page=\"homepage\"]");a&&(localStorage.removeItem("session"),localStorage.removeItem("rowsToShow"),sessionStorage.removeItem("publicationsFilterCategory"),sessionStorage.removeItem("publicationsFilterCompound"))}/**
  * @constant {Function} - Sets active page/parent page on page load
  */ /**
   * @constant {Function} - ResourceBlock - Adjusts height of `data-resources` blocks dynamically
   */function k(){const a=document.querySelector("[data-resource]");if(a){const b=a.getBoundingClientRect().top,c=4*t(u(document.documentElement,"font-size"));a.style.maxHeight=`calc(100vh - ${b-c}px)`}}/**
   * @constant {Function} - saveCompoundData - Adds selected compound data to the 'available' list
   */function l(){const a=[...document.querySelectorAll("[data-save-compound]")];a&&a.forEach(a=>{a.addEventListener("click",a=>{const b=a.currentTarget.dataset.target,c=a.currentTarget.dataset.name,d=w.message.confirmHiddenCompoundData(c);console.log(C(`${d}`,b))})})}/**
   * @module
   * @constant {Function} - ShowHiddenDownloads
   * Shows hidden download buttons on click.
   */ /**
   * @constant {array} - buttons - array of revealer-buttons
   */function m(){D.length&&D.forEach(a=>{a.addEventListener("click",a=>{const b=a.target.closest("article"),c="true"===b.dataset.active;// will need to polyfill elem.closest for IE support
b.dataset.active=!c},!1)})}/**
   * @constant {Function} - SlideDeck - Adjusts height of `data-slidedeck` blocks dynamically
   */function n(){const a=document.querySelector("[data-slidedeck]");if(a){const b=a.getBoundingClientRect().top,c=t(u(document.documentElement,"font-size"));a.style.height=`calc(100vh - ${b-c}px)`}}/**
   * @constant {Function} - StopMotion - Creates a stop-motion animation from static slides
   */function o(){const a=document.querySelector(".stop-motion_animation");if(a&&"true"===document.body.dataset.active){const b=a.querySelector(".fallback"),c=Array.from(a.querySelectorAll("img:not(.fallback)"));let d=c.length;const e=()=>{setInterval(()=>{const b=a.querySelector("img");a.insertAdjacentElement("beforeend",b)},40)},f=()=>{b.remove(),e()},g=()=>{d=0===d?0:d-1,0===d&&f()};c.forEach(a=>{a.complete?g():a.addEventListener("load",g)})}}/**
   * @module
   * GA Measurement Protocol Tracker module with offline tracking storage
   * @class Tracker
   * @global window.Lockr
   * @example https://www.simoahava.com/analytics/track-users-who-are-offline-in-google-analytics/
   */ /**
    * Build tracking event trackingDefaults object for current Screen View & send to tracker.
    *
  */function p(a){const b={cd:document.body.dataset.page?document.body.dataset.page:"lxl_no_page"},c=Object.assign({},w.trackingDefaults.page,b);return a.track(c)}const r=()=>Math.random().toString(36).substr(2,9),s=(c,a)=>c===a,t=a=>parseFloat(a.slice(0,a.length-a.match(/[a-zA-Z%]/g).length)),u=(a,b)=>window.getComputedStyle(a).getPropertyValue(b),v=a=>{let b=0,c=0;for(;a;){if("BODY"==a.tagName){// deal with browser quirks with body/window/document and page scroll
const d=a.scrollLeft||document.documentElement.scrollLeft,e=a.scrollTop||document.documentElement.scrollTop;b+=a.offsetLeft-d+a.clientLeft,c+=a.offsetTop-e+a.clientTop}else// for all other non-BODY elements
b+=a.offsetLeft-a.scrollLeft+a.clientLeft,c+=a.offsetTop-a.scrollTop+a.clientTop;a=a.offsetParent}return{x:b,y:c}};/**
   * Generates unique GUID string & saves to localStorage if not exists.
   * @constant {Function} - setGuid - Creates a unique identifier for the current session
   * @example setGuid()
   * @returns {String} - sessionID - Unique string of characters
   * @see generateUUID()
   */var w={deviceID:(()=>{// Create a unique device ID if one does not already exist
let b=localStorage.getItem("deviceID");return b||(b=[r()],a()?b.unshift("lxl_"):b.unshift("web_"),b=b.join(""),localStorage.setItem("deviceID",b)),b})(),isPhoneGap:a(),sessionID:((a="session")=>{let b=localStorage.getItem(a);return b||(b=c(),localStorage.setItem(a,b)),b})(),defaultMimeType:"application/vnd.ms-powerpoint",trackingDefaults:{download:{ea:"",// event action
ec:"document",// event category
el:"",// event category
t:"event"// hit type
},page:{el:"view",// event category
t:"screenview"// hit type
}},message:{zeroResults:"Sorry, there are no results",confirmHiddenCompoundData:a=>`This will show all the data for ${a}. Are you sure?`}};/**
   * @constant {Function} - SlideDeck - Adjusts height of `data-slidedeck` blocks dynamically
   */const x=a=>{var b=Math.abs;const c=u(document.documentElement,"--background_color-gradient"),d=a.querySelector("span[id*=\"gradient-\"]")||document.createElement("SPAN");d.id=`gradient-${r()}`,d.style.background=c,d.style.position="absolute",d.style.zIndex="-1",d.style.top=`${-b(v(a).y)}px`,d.style.left=`${-b(v(a).x)}px`,d.style.width="100vw",d.style.height="100vh",a.style.position="relative",a.style.overflow="hidden",a.insertAdjacentElement("afterbegin",d)},y=()=>{const a=[...document.querySelectorAll(".primary-navigation a")],b=document.body.dataset.nav;a.forEach(a=>{/* eslint-disable no-param-reassign */a.dataset.active=s(b,a.dataset.nav)})},z=()=>{const a=document.querySelector("[data-action=\"toggle-nav\"]"),b=document.querySelector("[data-target=\"primary-nav\"]");a&&b&&a.addEventListener("click",()=>{const c="true"===b.dataset.active;document.documentElement.style.overflow=c?"":"hidden",[...b.querySelectorAll("a")].forEach(a=>{a.setAttribute("tabindex",c?"-1":"0")}),a.dataset.active=!c,b.dataset.active=!c})},A=()=>{const a=[...document.querySelectorAll("[data-action=\"publications-link\"]")];a&&a.forEach(a=>{a.addEventListener("click",a=>{const{href:b,cat:c,cpd:d}=a.currentTarget.dataset;sessionStorage.setItem("publicationsFilterCategory",c),sessionStorage.setItem("publicationsFilterCompound",d),window.location.href=b})})},B=()=>{const a=[...document.querySelectorAll("[data-action=\"reset-publications\"]")];a&&a.forEach(a=>{a.addEventListener("click",()=>{sessionStorage.removeItem("publicationsFilterCategory"),sessionStorage.removeItem("publicationsFilterCompound")})})},C=(a,b)=>{const c=document.createElement("DIV");c.classList.add("confirm-modal");c.insertAdjacentHTML("afterbegin",`
    <dialog class="message" open>
      <form>
        <legend>Confirmation</legend>
        <fieldset>
          <label>${a}</label>
          <button type="button" data-target="reject">No</button>
          <button type="button" data-target="confirm">Yes</button>
        </fieldset>
      </form>
    </dialog>
  `),document.body.insertAdjacentElement("afterbegin",c);const d=a=>{"confirm"===a.currentTarget.dataset.target&&(window.location.href=`${b}/index.html`),c.remove()},e=c.querySelectorAll("button");e.forEach(a=>{a.addEventListener("click",d)})},D=[...document.querySelectorAll("button[data-show-hidden]")],E="https://www.google-analytics.com",F=document.querySelector("meta[name='application-name']"),G=F&&F.dataset.name,H=F&&F.dataset.version,I=F&&F.dataset.geoid,J={v:1,// Google protocol version
tid:"UA-36156565-7",ds:w.isPhoneGap?"app":"web",// data source
geoid:I,an:G,av:H,uid:w.deviceID,// Set Device ID
cid:w.sessionID// Set Session ID
};class K{constructor(a="lxl_"){this.prefix=a,Lockr.prefix=this.prefix}/**
     * Merge params obj into defaults obj then convert to query string.
     */static buildParamString(a){let b="";// slice remove trailing ampersand
return Object.entries(Object.assign(J,a)).forEach(([a,c])=>{b+=`${a}=${c}&`}),b=b.slice(0,-1),b}/**
     * If able to make an XHR request to Google, then:
     * 1] send current hit data
     * 2] send any saved hit data found in local storage,
     * otherwise:
     * 1] save hit to local storage
     *
     * @public
     * @example https://www.simoahava.com/analytics/track-users-who-are-offline-in-google-analytics/
     * @param {Object} - event - object with Google measurement protocol params as key value pairs
     */track(a){const c=this.constructor.buildParamString(a),d=b(),e=new XMLHttpRequest;// console.log('Tracking payload >>> ', params);
e.open("HEAD",`${E}/collect`),e.onreadystatechange=()=>{if(4===e.readyState&&200!==e.status&&Lockr.sadd("hits",encodeURI(`${c}z=${d}`)),4===e.readyState&&200===e.status){if("sendBeacon"in navigator)navigator.sendBeacon(`${E}/collect`,encodeURI(`${c}z=${d}`));else{const a=new XMLHttpRequest;a.open("POST",`${E}/collect`,!0),a.send(encodeURI(`${c}z=${d}`))}this.constructor.sync()}},e.send()}/**
     * Send any saved hit data found in local storage & flush cache when done.
     */static sync(){if(0<Lockr.smembers("hits").length){const a=1*new Date/1e3,b=Lockr.smembers("hits"),c=20,d=Lockr.smembers("hits").map((a,d)=>0==d%c?b.slice(d,d+c):null).filter(a=>a);for(let b=0,c=d.length;b<c;b+=1){const c=new XMLHttpRequest;c.open("POST",`${E}/batch`,!0),c.send(d[b].map(b=>-1<b.indexOf("&qt=")?b.replace(/qt=([^&]*)/,`qt=${1e3*q(a-b.match(/qt=([^&]*)/)[1]/1e3)}`):b).join("\n"))}Lockr.flush()}}/**
     * Cache cleanup: if online, then send any saved hit data on init().
     *
     */maybeSendSavedHits(){const a=new XMLHttpRequest;a.open("HEAD",`${E}/collect`),a.onreadystatechange=()=>{4===a.readyState&&200===a.status&&this.constructor.sync()},a.send()}/**
     * If app receives the PhoneGap 'online' event, then maybe send cached hits.
     * This event does not fire in the web version - just sends any saved tracking
     * data when app is first online.
     *
     */onDeviceReady(){document.addEventListener("online",this.maybeSendSavedHits.bind(this),!1)}/**
     * Only bind 'online' event if 'deviceready' is received, ie. in PhoneGap environment.
     *
     */bindEvents(){document.addEventListener("deviceready",this.onDeviceReady.bind(this),!1)}init(){this.bindEvents()}}const L=()=>{document.body.dataset.active=!0,j(),h();// Action page transition
// Initialise the tracking
const a=new K;// Adds event listeners to download buttons
// Adds event listeners to hidden buttons
// Initialises the menu items for hidden data
// Initialises the stop-motion animations
// Initialises hidden downloads functions
// Initialises the Publications data table filtering
a.init(),p(a),y(),z(),f(a),i(),l(),o(),m(),A(),B(),g(),k(),n(),d()};w.isPhoneGap?document.addEventListener("deviceready",L):window.addEventListener("load",L)});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
